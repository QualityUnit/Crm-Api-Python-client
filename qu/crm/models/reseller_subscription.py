# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional
from pydantic import BaseModel, Field, StrictStr, validator

class ResellerSubscription(BaseModel):
    """
    ResellerSubscription
    """
    id: Optional[StrictStr] = None
    domain: Optional[StrictStr] = Field(None, description="Default domain assigned to subscription when created (e.g. example.ladesk.com)")
    custom_domain: Optional[StrictStr] = Field(None, description="Additional domain parked to this subscription (e.g. support.example.com)")
    date_created: Optional[datetime] = None
    date_validity: Optional[datetime] = None
    status: Optional[StrictStr] = Field(None, description="I - installing, A - active, S - suspended, T - terminated")
    variation_id: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    initial_api_key: Optional[StrictStr] = Field(None, description="The initial api key. Only included in signup response.")
    initial_pass: Optional[StrictStr] = Field(None, description="Password of initial application user. Only included in signup response.")
    __properties = ["id", "domain", "custom_domain", "date_created", "date_validity", "status", "variation_id", "version", "initial_api_key", "initial_pass"]

    @validator('status')
    def status_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('I', 'A', 'S', 'T'):
            raise ValueError("must be one of enum values ('I', 'A', 'S', 'T')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> ResellerSubscription:
        """Create an instance of ResellerSubscription from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> ResellerSubscription:
        """Create an instance of ResellerSubscription from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return ResellerSubscription.parse_obj(obj)

        _obj = ResellerSubscription.parse_obj({
            "id": obj.get("id"),
            "domain": obj.get("domain"),
            "custom_domain": obj.get("custom_domain"),
            "date_created": obj.get("date_created"),
            "date_validity": obj.get("date_validity"),
            "status": obj.get("status"),
            "variation_id": obj.get("variation_id"),
            "version": obj.get("version"),
            "initial_api_key": obj.get("initial_api_key"),
            "initial_pass": obj.get("initial_pass")
        })
        return _obj

