# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional, Union
from pydantic import BaseModel, StrictBool, StrictFloat, StrictInt, StrictStr, conlist, validator
from qu.crm.models.variation_upgrade import VariationUpgrade

class VariationUpgrades(BaseModel):
    """
    VariationUpgrades
    """
    current: Optional[VariationUpgrade] = None
    upgrades: Optional[conlist(VariationUpgrade)] = None
    currency: Optional[StrictStr] = None
    tax_per_cent: Optional[Union[StrictFloat, StrictInt]] = None
    tax_included: Optional[StrictBool] = None
    __properties = ["current", "upgrades", "currency", "tax_per_cent", "tax_included"]

    @validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('USD', 'EUR'):
            raise ValueError("must be one of enum values ('USD', 'EUR')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VariationUpgrades:
        """Create an instance of VariationUpgrades from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of current
        if self.current:
            _dict['current'] = self.current.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in upgrades (list)
        _items = []
        if self.upgrades:
            for _item in self.upgrades:
                if _item:
                    _items.append(_item.to_dict())
            _dict['upgrades'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VariationUpgrades:
        """Create an instance of VariationUpgrades from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VariationUpgrades.parse_obj(obj)

        _obj = VariationUpgrades.parse_obj({
            "current": VariationUpgrade.from_dict(obj.get("current")) if obj.get("current") is not None else None,
            "upgrades": [VariationUpgrade.from_dict(_item) for _item in obj.get("upgrades")] if obj.get("upgrades") is not None else None,
            "currency": obj.get("currency"),
            "tax_per_cent": obj.get("tax_per_cent"),
            "tax_included": obj.get("tax_included")
        })
        return _obj

