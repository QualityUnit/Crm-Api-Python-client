# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt, StrictStr, conlist, validator
from qu.crm.models.customer import Customer
from qu.crm.models.invoice_item import InvoiceItem

class Invoice(BaseModel):
    """
    Invoice
    """
    subscription_id: Optional[StrictStr] = None
    number: Optional[StrictStr] = None
    refund_id: Optional[StrictStr] = None
    created_date: Optional[datetime] = Field(None, description="Invoice issued date")
    from_date: Optional[datetime] = None
    to_date: Optional[datetime] = None
    paid_date: Optional[datetime] = None
    price: Optional[Union[StrictFloat, StrictInt]] = None
    price_billed: Optional[Union[StrictFloat, StrictInt]] = None
    vat_rate: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = None
    customer: Optional[Customer] = None
    items: Optional[conlist(InvoiceItem)] = None
    __properties = ["subscription_id", "number", "refund_id", "created_date", "from_date", "to_date", "paid_date", "price", "price_billed", "vat_rate", "currency", "customer", "items"]

    @validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('USD', 'EUR'):
            raise ValueError("must be one of enum values ('USD', 'EUR')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Invoice:
        """Create an instance of Invoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in items (list)
        _items = []
        if self.items:
            for _item in self.items:
                if _item:
                    _items.append(_item.to_dict())
            _dict['items'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Invoice:
        """Create an instance of Invoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Invoice.parse_obj(obj)

        _obj = Invoice.parse_obj({
            "subscription_id": obj.get("subscription_id"),
            "number": obj.get("number"),
            "refund_id": obj.get("refund_id"),
            "created_date": obj.get("created_date"),
            "from_date": obj.get("from_date"),
            "to_date": obj.get("to_date"),
            "paid_date": obj.get("paid_date"),
            "price": obj.get("price"),
            "price_billed": obj.get("price_billed"),
            "vat_rate": obj.get("vat_rate"),
            "currency": obj.get("currency"),
            "customer": Customer.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "items": [InvoiceItem.from_dict(_item) for _item in obj.get("items")] if obj.get("items") is not None else None
        })
        return _obj

