# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictStr, conlist, validator

class Upgrade(BaseModel):
    """
    Upgrade
    """
    variation_id: StrictStr = Field(...)
    addons: Optional[conlist(StrictStr)] = None
    billing_period: Optional[StrictStr] = '1m'
    coupon: Optional[StrictStr] = None
    __properties = ["variation_id", "addons", "billing_period", "coupon"]

    @validator('billing_period')
    def billing_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('1m', '1y'):
            raise ValueError("must be one of enum values ('1m', '1y')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Upgrade:
        """Create an instance of Upgrade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Upgrade:
        """Create an instance of Upgrade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Upgrade.parse_obj(obj)

        _obj = Upgrade.parse_obj({
            "variation_id": obj.get("variation_id"),
            "addons": obj.get("addons"),
            "billing_period": obj.get("billing_period") if obj.get("billing_period") is not None else '1m',
            "coupon": obj.get("coupon")
        })
        return _obj

