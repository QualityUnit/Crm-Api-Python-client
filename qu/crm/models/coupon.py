# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictBool, StrictInt, StrictStr, validator

class Coupon(BaseModel):
    """
    Coupon
    """
    code: Optional[StrictStr] = None
    subscription_id: Optional[StrictStr] = None
    discount_type: StrictStr = Field(...)
    discount_value_type: StrictStr = Field(...)
    discount: StrictInt = Field(...)
    discount_name: Optional[StrictStr] = None
    reusable: Optional[StrictBool] = None
    date_valid: Optional[StrictStr] = None
    note: Optional[StrictStr] = None
    created_by: Optional[StrictStr] = None
    date_created: Optional[StrictStr] = None
    ended_by: Optional[StrictStr] = None
    date_expired: Optional[StrictStr] = None
    __properties = ["code", "subscription_id", "discount_type", "discount_value_type", "discount", "discount_name", "reusable", "date_valid", "note", "created_by", "date_created", "ended_by", "date_expired"]

    @validator('discount_type')
    def discount_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('one_time', 'current_plan', 'permanent'):
            raise ValueError("must be one of enum values ('one_time', 'current_plan', 'permanent')")
        return value

    @validator('discount_value_type')
    def discount_value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value not in ('constant', 'per_cent'):
            raise ValueError("must be one of enum values ('constant', 'per_cent')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Coupon:
        """Create an instance of Coupon from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "created_by",
                            "date_created",
                            "ended_by",
                            "date_expired",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Coupon:
        """Create an instance of Coupon from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Coupon.parse_obj(obj)

        _obj = Coupon.parse_obj({
            "code": obj.get("code"),
            "subscription_id": obj.get("subscription_id"),
            "discount_type": obj.get("discount_type"),
            "discount_value_type": obj.get("discount_value_type"),
            "discount": obj.get("discount"),
            "discount_name": obj.get("discount_name"),
            "reusable": obj.get("reusable"),
            "date_valid": obj.get("date_valid"),
            "note": obj.get("note"),
            "created_by": obj.get("created_by"),
            "date_created": obj.get("date_created"),
            "ended_by": obj.get("ended_by"),
            "date_expired": obj.get("date_expired")
        })
        return _obj

