# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr

class PapTrackingParams(BaseModel):
    """
    PapTrackingParams
    """
    a_aid: Optional[StrictStr] = None
    a_bid: Optional[StrictStr] = None
    a_cid: Optional[StrictStr] = None
    a_rid: Optional[StrictStr] = None
    data1: Optional[StrictStr] = None
    data2: Optional[StrictStr] = None
    desturl: Optional[StrictStr] = None
    visit_processors: Optional[Union[StrictFloat, StrictInt]] = None
    imp_processors: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["a_aid", "a_bid", "a_cid", "a_rid", "data1", "data2", "desturl", "visit_processors", "imp_processors"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> PapTrackingParams:
        """Create an instance of PapTrackingParams from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> PapTrackingParams:
        """Create an instance of PapTrackingParams from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return PapTrackingParams.parse_obj(obj)

        _obj = PapTrackingParams.parse_obj({
            "a_aid": obj.get("a_aid"),
            "a_bid": obj.get("a_bid"),
            "a_cid": obj.get("a_cid"),
            "a_rid": obj.get("a_rid"),
            "data1": obj.get("data1"),
            "data2": obj.get("data2"),
            "desturl": obj.get("desturl"),
            "visit_processors": obj.get("visit_processors"),
            "imp_processors": obj.get("imp_processors")
        })
        return _obj

