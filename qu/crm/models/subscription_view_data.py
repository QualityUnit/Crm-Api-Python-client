# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictStr, conlist
from qu.crm.models.account_manager import AccountManager
from qu.crm.models.addon import Addon
from qu.crm.models.asterisk_host import AsteriskHost
from qu.crm.models.aws_region import AwsRegion
from qu.crm.models.billing_status import BillingStatus
from qu.crm.models.customer import Customer
from qu.crm.models.domain import Domain
from qu.crm.models.hosted_api_key import HostedApiKey
from qu.crm.models.initial_lang import InitialLang
from qu.crm.models.initial_login_attempts import InitialLoginAttempts
from qu.crm.models.note import Note
from qu.crm.models.owner_email import OwnerEmail
from qu.crm.models.public_ip import PublicIp
from qu.crm.models.score import Score
from qu.crm.models.source import Source
from qu.crm.models.subscription_view_db import SubscriptionViewDb
from qu.crm.models.track_ga_client import TrackGaClient
from qu.crm.models.track_pap_signup_ip import TrackPapSignupIp
from qu.crm.models.track_pap_user_agent import TrackPapUserAgent
from qu.crm.models.version_info import VersionInfo

class SubscriptionViewData(BaseModel):
    """
    additional subscription data shown by admin interface
    """
    addons: Optional[conlist(Addon)] = None
    billing_status: Optional[BillingStatus] = None
    customer: Optional[Customer] = None
    domain: Optional[Domain] = None
    note: Optional[Note] = None
    source: Optional[Source] = None
    variation_addons: Optional[conlist(Addon)] = None
    account_manager: Optional[AccountManager] = None
    db: Optional[SubscriptionViewDb] = None
    version_info: Optional[VersionInfo] = None
    locks: Optional[conlist(StrictStr)] = None
    initial_login_attempts: Optional[InitialLoginAttempts] = None
    initial_lang: Optional[InitialLang] = None
    public_ip: Optional[PublicIp] = None
    score: Optional[Score] = None
    owner_email: Optional[OwnerEmail] = None
    asterisk_host: Optional[AsteriskHost] = None
    aws_region: Optional[AwsRegion] = None
    track_ga_client: Optional[TrackGaClient] = None
    track_pap_signup_ip: Optional[TrackPapSignupIp] = None
    track_pap_user_agent: Optional[TrackPapUserAgent] = None
    hosted_api_key: Optional[HostedApiKey] = None
    __properties = ["addons", "billing_status", "customer", "domain", "note", "source", "variation_addons", "account_manager", "db", "version_info", "locks", "initial_login_attempts", "initial_lang", "public_ip", "score", "owner_email", "asterisk_host", "aws_region", "track_ga_client", "track_pap_signup_ip", "track_pap_user_agent", "hosted_api_key"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SubscriptionViewData:
        """Create an instance of SubscriptionViewData from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item in self.addons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addons'] = _items
        # override the default output from pydantic by calling `to_dict()` of billing_status
        if self.billing_status:
            _dict['billing_status'] = self.billing_status.to_dict()
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of domain
        if self.domain:
            _dict['domain'] = self.domain.to_dict()
        # override the default output from pydantic by calling `to_dict()` of note
        if self.note:
            _dict['note'] = self.note.to_dict()
        # override the default output from pydantic by calling `to_dict()` of source
        if self.source:
            _dict['source'] = self.source.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in variation_addons (list)
        _items = []
        if self.variation_addons:
            for _item in self.variation_addons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['variation_addons'] = _items
        # override the default output from pydantic by calling `to_dict()` of account_manager
        if self.account_manager:
            _dict['account_manager'] = self.account_manager.to_dict()
        # override the default output from pydantic by calling `to_dict()` of db
        if self.db:
            _dict['db'] = self.db.to_dict()
        # override the default output from pydantic by calling `to_dict()` of version_info
        if self.version_info:
            _dict['version_info'] = self.version_info.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_login_attempts
        if self.initial_login_attempts:
            _dict['initial_login_attempts'] = self.initial_login_attempts.to_dict()
        # override the default output from pydantic by calling `to_dict()` of initial_lang
        if self.initial_lang:
            _dict['initial_lang'] = self.initial_lang.to_dict()
        # override the default output from pydantic by calling `to_dict()` of public_ip
        if self.public_ip:
            _dict['public_ip'] = self.public_ip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of score
        if self.score:
            _dict['score'] = self.score.to_dict()
        # override the default output from pydantic by calling `to_dict()` of owner_email
        if self.owner_email:
            _dict['owner_email'] = self.owner_email.to_dict()
        # override the default output from pydantic by calling `to_dict()` of asterisk_host
        if self.asterisk_host:
            _dict['asterisk_host'] = self.asterisk_host.to_dict()
        # override the default output from pydantic by calling `to_dict()` of aws_region
        if self.aws_region:
            _dict['aws_region'] = self.aws_region.to_dict()
        # override the default output from pydantic by calling `to_dict()` of track_ga_client
        if self.track_ga_client:
            _dict['track_ga_client'] = self.track_ga_client.to_dict()
        # override the default output from pydantic by calling `to_dict()` of track_pap_signup_ip
        if self.track_pap_signup_ip:
            _dict['track_pap_signup_ip'] = self.track_pap_signup_ip.to_dict()
        # override the default output from pydantic by calling `to_dict()` of track_pap_user_agent
        if self.track_pap_user_agent:
            _dict['track_pap_user_agent'] = self.track_pap_user_agent.to_dict()
        # override the default output from pydantic by calling `to_dict()` of hosted_api_key
        if self.hosted_api_key:
            _dict['hosted_api_key'] = self.hosted_api_key.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SubscriptionViewData:
        """Create an instance of SubscriptionViewData from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SubscriptionViewData.parse_obj(obj)

        _obj = SubscriptionViewData.parse_obj({
            "addons": [Addon.from_dict(_item) for _item in obj.get("addons")] if obj.get("addons") is not None else None,
            "billing_status": BillingStatus.from_dict(obj.get("billing_status")) if obj.get("billing_status") is not None else None,
            "customer": Customer.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "domain": Domain.from_dict(obj.get("domain")) if obj.get("domain") is not None else None,
            "note": Note.from_dict(obj.get("note")) if obj.get("note") is not None else None,
            "source": Source.from_dict(obj.get("source")) if obj.get("source") is not None else None,
            "variation_addons": [Addon.from_dict(_item) for _item in obj.get("variation_addons")] if obj.get("variation_addons") is not None else None,
            "account_manager": AccountManager.from_dict(obj.get("account_manager")) if obj.get("account_manager") is not None else None,
            "db": SubscriptionViewDb.from_dict(obj.get("db")) if obj.get("db") is not None else None,
            "version_info": VersionInfo.from_dict(obj.get("version_info")) if obj.get("version_info") is not None else None,
            "locks": obj.get("locks"),
            "initial_login_attempts": InitialLoginAttempts.from_dict(obj.get("initial_login_attempts")) if obj.get("initial_login_attempts") is not None else None,
            "initial_lang": InitialLang.from_dict(obj.get("initial_lang")) if obj.get("initial_lang") is not None else None,
            "public_ip": PublicIp.from_dict(obj.get("public_ip")) if obj.get("public_ip") is not None else None,
            "score": Score.from_dict(obj.get("score")) if obj.get("score") is not None else None,
            "owner_email": OwnerEmail.from_dict(obj.get("owner_email")) if obj.get("owner_email") is not None else None,
            "asterisk_host": AsteriskHost.from_dict(obj.get("asterisk_host")) if obj.get("asterisk_host") is not None else None,
            "aws_region": AwsRegion.from_dict(obj.get("aws_region")) if obj.get("aws_region") is not None else None,
            "track_ga_client": TrackGaClient.from_dict(obj.get("track_ga_client")) if obj.get("track_ga_client") is not None else None,
            "track_pap_signup_ip": TrackPapSignupIp.from_dict(obj.get("track_pap_signup_ip")) if obj.get("track_pap_signup_ip") is not None else None,
            "track_pap_user_agent": TrackPapUserAgent.from_dict(obj.get("track_pap_user_agent")) if obj.get("track_pap_user_agent") is not None else None,
            "hosted_api_key": HostedApiKey.from_dict(obj.get("hosted_api_key")) if obj.get("hosted_api_key") is not None else None
        })
        return _obj

