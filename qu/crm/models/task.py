# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from qu.crm.models.task_attempt import TaskAttempt

class Task(BaseModel):
    """
    Task
    """
    id: StrictStr = Field(...)
    name: Optional[StrictStr] = None
    started_at: Optional[datetime] = None
    finished_at: Optional[datetime] = None
    is_broken: Optional[StrictBool] = None
    attempts: Optional[conlist(TaskAttempt)] = None
    result: Optional[StrictStr] = Field(None, description="S - OK E - error R - running")
    task_data: Optional[StrictStr] = None
    __properties = ["id", "name", "started_at", "finished_at", "is_broken", "attempts", "result", "task_data"]

    @validator('result')
    def result_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('S', 'E', 'R'):
            raise ValueError("must be one of enum values ('S', 'E', 'R')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Task:
        """Create an instance of Task from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of each item in attempts (list)
        _items = []
        if self.attempts:
            for _item in self.attempts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['attempts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Task:
        """Create an instance of Task from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Task.parse_obj(obj)

        _obj = Task.parse_obj({
            "id": obj.get("id"),
            "name": obj.get("name"),
            "started_at": obj.get("started_at"),
            "finished_at": obj.get("finished_at"),
            "is_broken": obj.get("is_broken"),
            "attempts": [TaskAttempt.from_dict(_item) for _item in obj.get("attempts")] if obj.get("attempts") is not None else None,
            "result": obj.get("result"),
            "task_data": obj.get("task_data")
        })
        return _obj

