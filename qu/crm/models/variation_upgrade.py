# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, StrictInt, conlist
from qu.crm.models.addon import Addon
from qu.crm.models.billing_metric import BillingMetric
from qu.crm.models.discount_value import DiscountValue
from qu.crm.models.period_pricing import PeriodPricing
from qu.crm.models.variation import Variation

class VariationUpgrade(BaseModel):
    """
    VariationUpgrade
    """
    variation: Optional[Variation] = None
    addons: Optional[conlist(Addon)] = None
    billing_periods: Optional[conlist(PeriodPricing)] = None
    metrics: Optional[conlist(BillingMetric)] = None
    base_price: Optional[StrictInt] = None
    discounts: Optional[conlist(DiscountValue)] = None
    __properties = ["variation", "addons", "billing_periods", "metrics", "base_price", "discounts"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> VariationUpgrade:
        """Create an instance of VariationUpgrade from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of variation
        if self.variation:
            _dict['variation'] = self.variation.to_dict()
        # override the default output from pydantic by calling `to_dict()` of each item in addons (list)
        _items = []
        if self.addons:
            for _item in self.addons:
                if _item:
                    _items.append(_item.to_dict())
            _dict['addons'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in billing_periods (list)
        _items = []
        if self.billing_periods:
            for _item in self.billing_periods:
                if _item:
                    _items.append(_item.to_dict())
            _dict['billing_periods'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in metrics (list)
        _items = []
        if self.metrics:
            for _item in self.metrics:
                if _item:
                    _items.append(_item.to_dict())
            _dict['metrics'] = _items
        # override the default output from pydantic by calling `to_dict()` of each item in discounts (list)
        _items = []
        if self.discounts:
            for _item in self.discounts:
                if _item:
                    _items.append(_item.to_dict())
            _dict['discounts'] = _items
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> VariationUpgrade:
        """Create an instance of VariationUpgrade from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return VariationUpgrade.parse_obj(obj)

        _obj = VariationUpgrade.parse_obj({
            "variation": Variation.from_dict(obj.get("variation")) if obj.get("variation") is not None else None,
            "addons": [Addon.from_dict(_item) for _item in obj.get("addons")] if obj.get("addons") is not None else None,
            "billing_periods": [PeriodPricing.from_dict(_item) for _item in obj.get("billing_periods")] if obj.get("billing_periods") is not None else None,
            "metrics": [BillingMetric.from_dict(_item) for _item in obj.get("metrics")] if obj.get("metrics") is not None else None,
            "base_price": obj.get("base_price"),
            "discounts": [DiscountValue.from_dict(_item) for _item in obj.get("discounts")] if obj.get("discounts") is not None else None
        })
        return _obj

