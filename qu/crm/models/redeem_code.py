# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from qu.crm.models.discount_template import DiscountTemplate
from qu.crm.models.redemption import Redemption

class RedeemCode(BaseModel):
    """
    RedeemCode
    """
    code: StrictStr = Field(...)
    variation_id: StrictStr = Field(...)
    expires_at: Optional[StrictStr] = None
    discount_template: Optional[DiscountTemplate] = None
    redemption: Optional[Redemption] = None
    __properties = ["code", "variation_id", "expires_at", "discount_template", "redemption"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> RedeemCode:
        """Create an instance of RedeemCode from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of discount_template
        if self.discount_template:
            _dict['discount_template'] = self.discount_template.to_dict()
        # override the default output from pydantic by calling `to_dict()` of redemption
        if self.redemption:
            _dict['redemption'] = self.redemption.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> RedeemCode:
        """Create an instance of RedeemCode from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return RedeemCode.parse_obj(obj)

        _obj = RedeemCode.parse_obj({
            "code": obj.get("code"),
            "variation_id": obj.get("variation_id"),
            "expires_at": obj.get("expires_at"),
            "discount_template": DiscountTemplate.from_dict(obj.get("discount_template")) if obj.get("discount_template") is not None else None,
            "redemption": Redemption.from_dict(obj.get("redemption")) if obj.get("redemption") is not None else None
        })
        return _obj

