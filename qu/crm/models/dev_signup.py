# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr
from qu.crm.models.customer import Customer

class DevSignup(BaseModel):
    """
    DevSignup
    """
    variation_id: StrictStr = Field(...)
    subdomain: StrictStr = Field(...)
    language: Optional[StrictStr] = Field(None, description="Code of application language")
    initial_api_key: Optional[StrictStr] = Field(None, description="The initial application api key")
    initial_pass: Optional[StrictStr] = Field(None, description="Password of initial application user")
    cluster: Optional[StrictStr] = None
    version: Optional[StrictStr] = None
    customer: Customer = Field(...)
    __properties = ["variation_id", "subdomain", "language", "initial_api_key", "initial_pass", "cluster", "version", "customer"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DevSignup:
        """Create an instance of DevSignup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DevSignup:
        """Create an instance of DevSignup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DevSignup.parse_obj(obj)

        _obj = DevSignup.parse_obj({
            "variation_id": obj.get("variation_id"),
            "subdomain": obj.get("subdomain"),
            "language": obj.get("language"),
            "initial_api_key": obj.get("initial_api_key"),
            "initial_pass": obj.get("initial_pass"),
            "cluster": obj.get("cluster"),
            "version": obj.get("version"),
            "customer": Customer.from_dict(obj.get("customer")) if obj.get("customer") is not None else None
        })
        return _obj

