# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, validator

class Summary(BaseModel):
    """
    Summary
    """
    order_number: Optional[StrictStr] = None
    period: Optional[StrictStr] = None
    total_usd: Optional[Union[StrictFloat, StrictInt]] = None
    paid_usd: Optional[Union[StrictFloat, StrictInt]] = None
    to_pay_usd: Optional[Union[StrictFloat, StrictInt]] = None
    __properties = ["order_number", "period", "total_usd", "paid_usd", "to_pay_usd"]

    @validator('period')
    def period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('1m', '1y'):
            raise ValueError("must be one of enum values ('1m', '1y')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Summary:
        """Create an instance of Summary from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Summary:
        """Create an instance of Summary from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Summary.parse_obj(obj)

        _obj = Summary.parse_obj({
            "order_number": obj.get("order_number"),
            "period": obj.get("period"),
            "total_usd": obj.get("total_usd"),
            "paid_usd": obj.get("paid_usd"),
            "to_pay_usd": obj.get("to_pay_usd")
        })
        return _obj

