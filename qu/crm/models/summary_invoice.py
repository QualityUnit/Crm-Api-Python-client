# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from typing import Optional, Union
from pydantic import BaseModel, StrictFloat, StrictInt, StrictStr, validator

class SummaryInvoice(BaseModel):
    """
    SummaryInvoice
    """
    invoice_number: Optional[StrictStr] = None
    created_at: Optional[datetime] = None
    paid_at: Optional[datetime] = None
    price_billed: Optional[Union[StrictFloat, StrictInt]] = None
    currency: Optional[StrictStr] = None
    __properties = ["invoice_number", "created_at", "paid_at", "price_billed", "currency"]

    @validator('currency')
    def currency_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('USD', 'EUR'):
            raise ValueError("must be one of enum values ('USD', 'EUR')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> SummaryInvoice:
        """Create an instance of SummaryInvoice from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> SummaryInvoice:
        """Create an instance of SummaryInvoice from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return SummaryInvoice.parse_obj(obj)

        _obj = SummaryInvoice.parse_obj({
            "invoice_number": obj.get("invoice_number"),
            "created_at": obj.get("created_at"),
            "paid_at": obj.get("paid_at"),
            "price_billed": obj.get("price_billed"),
            "currency": obj.get("currency")
        })
        return _obj

