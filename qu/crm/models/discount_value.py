# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr, validator

class DiscountValue(BaseModel):
    """
    DiscountValue
    """
    name: Optional[StrictStr] = None
    type: Optional[StrictStr] = None
    value_type: Optional[StrictStr] = None
    value: Optional[StrictInt] = None
    __properties = ["name", "type", "value_type", "value"]

    @validator('type')
    def type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('one_time', 'current_plan', 'permanent'):
            raise ValueError("must be one of enum values ('one_time', 'current_plan', 'permanent')")
        return value

    @validator('value_type')
    def value_type_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('per_cent', 'constant'):
            raise ValueError("must be one of enum values ('per_cent', 'constant')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> DiscountValue:
        """Create an instance of DiscountValue from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                            "name",
                            "type",
                            "value_type",
                            "value",
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> DiscountValue:
        """Create an instance of DiscountValue from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return DiscountValue.parse_obj(obj)

        _obj = DiscountValue.parse_obj({
            "name": obj.get("name"),
            "type": obj.get("type"),
            "value_type": obj.get("value_type"),
            "value": obj.get("value")
        })
        return _obj

