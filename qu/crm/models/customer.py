# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, Field, StrictStr

class Customer(BaseModel):
    """
    Customer
    """
    name: StrictStr = Field(...)
    email: StrictStr = Field(...)
    company: Optional[StrictStr] = None
    phone: Optional[StrictStr] = None
    address1: Optional[StrictStr] = None
    address2: Optional[StrictStr] = None
    city: Optional[StrictStr] = None
    state: Optional[StrictStr] = None
    country: Optional[StrictStr] = None
    zip: Optional[StrictStr] = None
    vat_id: Optional[StrictStr] = None
    ico_sk: Optional[StrictStr] = None
    dic_sk: Optional[StrictStr] = None
    __properties = ["name", "email", "company", "phone", "address1", "address2", "city", "state", "country", "zip", "vat_id", "ico_sk", "dic_sk"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Customer:
        """Create an instance of Customer from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Customer:
        """Create an instance of Customer from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Customer.parse_obj(obj)

        _obj = Customer.parse_obj({
            "name": obj.get("name"),
            "email": obj.get("email"),
            "company": obj.get("company"),
            "phone": obj.get("phone"),
            "address1": obj.get("address1"),
            "address2": obj.get("address2"),
            "city": obj.get("city"),
            "state": obj.get("state"),
            "country": obj.get("country"),
            "zip": obj.get("zip"),
            "vat_id": obj.get("vat_id"),
            "ico_sk": obj.get("ico_sk"),
            "dic_sk": obj.get("dic_sk")
        })
        return _obj

