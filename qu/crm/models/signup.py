# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import List, Optional
from pydantic import BaseModel, Field, StrictBool, StrictStr, conlist, validator
from qu.crm.models.customer import Customer
from qu.crm.models.payment_method import PaymentMethod

class Signup(BaseModel):
    """
    Signup
    """
    variation_id: StrictStr = Field(...)
    subdomain: StrictStr = Field(...)
    language: Optional[StrictStr] = None
    initial_api_key: Optional[StrictStr] = None
    billing_period: Optional[StrictStr] = '1m'
    note: Optional[StrictStr] = None
    addons: Optional[conlist(StrictStr)] = None
    source_id: Optional[StrictStr] = None
    grtoken: Optional[StrictStr] = None
    pap_visitor_id: Optional[StrictStr] = None
    ga_client_id: Optional[StrictStr] = None
    promo: Optional[StrictBool] = None
    customer: Customer = Field(...)
    payment_method: Optional[PaymentMethod] = None
    __properties = ["variation_id", "subdomain", "language", "initial_api_key", "billing_period", "note", "addons", "source_id", "grtoken", "pap_visitor_id", "ga_client_id", "promo", "customer", "payment_method"]

    @validator('billing_period')
    def billing_period_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('1m'):
            raise ValueError("must be one of enum values ('1m')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Signup:
        """Create an instance of Signup from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        # override the default output from pydantic by calling `to_dict()` of customer
        if self.customer:
            _dict['customer'] = self.customer.to_dict()
        # override the default output from pydantic by calling `to_dict()` of payment_method
        if self.payment_method:
            _dict['payment_method'] = self.payment_method.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Signup:
        """Create an instance of Signup from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Signup.parse_obj(obj)

        _obj = Signup.parse_obj({
            "variation_id": obj.get("variation_id"),
            "subdomain": obj.get("subdomain"),
            "language": obj.get("language"),
            "initial_api_key": obj.get("initial_api_key"),
            "billing_period": obj.get("billing_period") if obj.get("billing_period") is not None else '1m',
            "note": obj.get("note"),
            "addons": obj.get("addons"),
            "source_id": obj.get("source_id"),
            "grtoken": obj.get("grtoken"),
            "pap_visitor_id": obj.get("pap_visitor_id"),
            "ga_client_id": obj.get("ga_client_id"),
            "promo": obj.get("promo"),
            "customer": Customer.from_dict(obj.get("customer")) if obj.get("customer") is not None else None,
            "payment_method": PaymentMethod.from_dict(obj.get("payment_method")) if obj.get("payment_method") is not None else None
        })
        return _obj

