# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Any, Dict, Optional, Union
from pydantic import BaseModel, Field, StrictFloat, StrictInt

class AccountStats(BaseModel):
    """
    AccountStats
    """
    today_new: Optional[Union[StrictFloat, StrictInt]] = None
    today_new_paid: Optional[Union[StrictFloat, StrictInt]] = None
    active: Optional[Union[StrictFloat, StrictInt]] = None
    active_paid: Optional[Union[StrictFloat, StrictInt]] = None
    agents: Optional[Union[StrictFloat, StrictInt]] = None
    agents_paid: Optional[Union[StrictFloat, StrictInt]] = None
    variations_active: Optional[Dict[str, Any]] = Field(None, description="active variations")
    variations_agents: Optional[Dict[str, Any]] = Field(None, description="agents per variation")
    __properties = ["today_new", "today_new_paid", "active", "active_paid", "agents", "agents_paid", "variations_active", "variations_agents"]

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> AccountStats:
        """Create an instance of AccountStats from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> AccountStats:
        """Create an instance of AccountStats from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return AccountStats.parse_obj(obj)

        _obj = AccountStats.parse_obj({
            "today_new": obj.get("today_new"),
            "today_new_paid": obj.get("today_new_paid"),
            "active": obj.get("active"),
            "active_paid": obj.get("active_paid"),
            "agents": obj.get("agents"),
            "agents_paid": obj.get("agents_paid"),
            "variations_active": obj.get("variations_active"),
            "variations_agents": obj.get("variations_agents")
        })
        return _obj

