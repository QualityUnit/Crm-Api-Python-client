# coding: utf-8

"""
    CRM API

    This page contains complete API documentation for CRM software.  # noqa: E501

    The version of the OpenAPI document: 3.0.0
    Contact: support@qualityunit.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""


from __future__ import annotations
import pprint
import re  # noqa: F401
import json


from typing import Optional
from pydantic import BaseModel, StrictInt, StrictStr, validator

class Template(BaseModel):
    """
    Template
    """
    id: Optional[StrictInt] = None
    recipient: Optional[StrictStr] = None
    product_id: Optional[StrictStr] = None
    variation_id: Optional[StrictStr] = None
    occasion: Optional[StrictStr] = None
    subject: Optional[StrictStr] = None
    body: Optional[StrictStr] = None
    sender: Optional[StrictStr] = None
    bcc_recipients: Optional[StrictStr] = None
    __properties = ["id", "recipient", "product_id", "variation_id", "occasion", "subject", "body", "sender", "bcc_recipients"]

    @validator('recipient')
    def recipient_validate_enum(cls, value):
        """Validates the enum"""
        if value is None:
            return value

        if value not in ('C', 'R', 'S'):
            raise ValueError("must be one of enum values ('C', 'R', 'S')")
        return value

    class Config:
        """Pydantic configuration"""
        allow_population_by_field_name = True
        validate_assignment = True

    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.dict(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Template:
        """Create an instance of Template from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self):
        """Returns the dictionary representation of the model using alias"""
        _dict = self.dict(by_alias=True,
                          exclude={
                          },
                          exclude_none=True)
        return _dict

    @classmethod
    def from_dict(cls, obj: dict) -> Template:
        """Create an instance of Template from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return Template.parse_obj(obj)

        _obj = Template.parse_obj({
            "id": obj.get("id"),
            "recipient": obj.get("recipient"),
            "product_id": obj.get("product_id"),
            "variation_id": obj.get("variation_id"),
            "occasion": obj.get("occasion"),
            "subject": obj.get("subject"),
            "body": obj.get("body"),
            "sender": obj.get("sender"),
            "bcc_recipients": obj.get("bcc_recipients")
        })
        return _obj

